import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_mlkit_text_recognition/google_mlkit_text_recognition.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'barcode_scanner_screen.dart';
import 'date_scanner_screen.dart';
import '../l10n/app_localizations.dart';
import '../services/barcode_service.dart';
import '../utils/product_detector.dart';

class AddItemScreen extends StatefulWidget {
  @override
  _AddItemScreenState createState() => _AddItemScreenState();
}

class _AddItemScreenState extends State<AddItemScreen> {
  final nameController = TextEditingController();
  final quantityController = TextEditingController(text: '1');
  final categoryController = TextEditingController();
  DateTime? expirationDate;
  String? imageUrl;
  String? scannedBarcode;
  bool _isLoadingProduct = false;
  bool _isScanningText = false;

  final ProductDetector detector = ProductDetector();

  Future<void> _scanProductText() async {
    final picker = ImagePicker();
    final pickedImage = await picker.pickImage(source: ImageSource.camera);
    if (pickedImage == null) return;

    setState(() => _isScanningText = true);
    final inputImage = InputImage.fromFile(File(pickedImage.path));
    final textRecognizer = TextRecognizer();
    final RecognizedText recognizedText = await textRecognizer.processImage(inputImage);
    textRecognizer.close();

    final scannedText = recognizedText.text.replaceAll('\n', ' ').trim();

    await detector.loadData();
    final result = detector.detect(scannedText);

    setState(() {
      nameController.text = "${result['product_name']} ${result['brand'] ?? ''}".trim();
      categoryController.text = result['category'] ?? 'unknown';
      _isScanningText = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    return Scaffold(
      appBar: AppBar(title: Text(l10n.addItemTitle)),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              if (imageUrl != null)
                Padding(
                  padding: const EdgeInsets.only(bottom: 16),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(8),
                    child: Image.network(
                      imageUrl!,
                      height: 150,
                      fit: BoxFit.contain,
                      errorBuilder: (context, error, stackTrace) =>
                          Container(height: 150, child: Icon(Icons.broken_image, size: 50)),
                      loadingBuilder: (context, child, loadingProgress) {
                        if (loadingProgress == null) return child;
                        return Container(height: 150, child: Center(child: CircularProgressIndicator()));
                      },
                    ),
                  ),
                ),
              ElevatedButton.icon(
                icon: _isLoadingProduct
                    ? SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white))
                    : Icon(Icons.qr_code_scanner),
                label: Text(_isLoadingProduct ? l10n.loading : l10n.scanBarcode),
                onPressed: _isLoadingProduct ? null : _scanBarcode,
              ),
              SizedBox(height: 16),
              ElevatedButton.icon(
                icon: _isScanningText
                    ? SizedBox(width: 20, height: 20, child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white))
                    : Icon(Icons.camera_alt),
                label: Text(_isScanningText ? 'Scanning...' : 'Scan Product Info'),
                onPressed: _isScanningText ? null : _scanProductText,
              ),
              SizedBox(height: 16),
              TextField(
                controller: nameController,
                decoration: InputDecoration(labelText: l10n.itemName, border: OutlineInputBorder()),
              ),
              SizedBox(height: 16),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  IconButton(
                    icon: Icon(Icons.remove_circle_outline, color: Colors.red),
                    onPressed: () {
                      setState(() {
                        int currentQuantity = int.tryParse(quantityController.text) ?? 1;
                        if (currentQuantity > 1) quantityController.text = (currentQuantity - 1).toString();
                      });
                    },
                  ),
                  SizedBox(
                    width: 60,
                    child: TextField(
                      controller: quantityController,
                      keyboardType: TextInputType.number,
                      textAlign: TextAlign.center,
                      decoration: InputDecoration(
                        isDense: true,
                        contentPadding: EdgeInsets.zero,
                        border: InputBorder.none,
                        labelText: l10n.quantity,
                      ),
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                      onChanged: (text) {
                        int? parsedQuantity = int.tryParse(text);
                        if (parsedQuantity != null && parsedQuantity < 1) {
                          quantityController.text = '1';
                        }
                      },
                    ),
                  ),
                  IconButton(
                    icon: Icon(Icons.add_circle_outline, color: Colors.green),
                    onPressed: () {
                      setState(() {
                        int currentQuantity = int.tryParse(quantityController.text) ?? 1;
                        quantityController.text = (currentQuantity + 1).toString();
                      });
                    },
                  ),
                ],
              ),
              SizedBox(height: 16),
              TextField(
                controller: categoryController,
                decoration: InputDecoration(labelText: l10n.category, border: OutlineInputBorder()),
              ),
              SizedBox(height: 30),
              ElevatedButton(
                onPressed: _submit,
                child: Text(l10n.save),
                style: ElevatedButton.styleFrom(minimumSize: Size(double.infinity, 48)),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _submit() async {
    final l10n = AppLocalizations.of(context)!;
    final name = nameController.text.trim();
    final quantity = int.tryParse(quantityController.text.trim()) ?? 1;
    final category = categoryController.text.trim();

    final prefs = await SharedPreferences.getInstance();
    final userId = prefs.getString('user_id');
    final locationId = prefs.getString('location_id');

    if (userId == null || locationId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(l10n.missingUserOrLocation)),
      );
      return;
    }
    if (name.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(l10n.itemNameCannotBeEmpty)),
      );
      return;
    }
    if (quantity <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(l10n.quantityMustBePositive)),
      );
      return;
    }

    try {
      final itemData = {
        'name': name,
        'quantity': quantity,
        'category': category,
        'expirationDate': expirationDate?.toIso8601String(),
        'barcode': scannedBarcode,
        'userId': userId,
        'locationId': locationId,
        'imageUrl': imageUrl ?? '',
        'createdAt': FieldValue.serverTimestamp(),
      };

      await FirebaseFirestore.instance.collection('inventory_items').add(itemData);
      Navigator.pop(context);
    } catch (e) {
      print("Add item failed: $e");
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(l10n.failedToSaveItem)),
      );
    }
  }

  Future<void> _scanBarcode() async {
    final code = await Navigator.push<String>(
      context,
      MaterialPageRoute(builder: (_) => const BarcodeScannerScreen()),
    );
    if (code != null && code.isNotEmpty) {
      await _fetchProductInfo(code);
    }
  }

  Future<void> _fetchProductInfo(String barcode) async {
    final l10n = AppLocalizations.of(context)!;
    setState(() => _isLoadingProduct = true);
    try {
      final result = await BarcodeService.lookupBarcode(barcode);
      if (result != null) {
        setState(() {
          scannedBarcode = barcode;
          nameController.text = result["name"] ?? '';
          imageUrl = result["image"];
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(l10n.productFound(result['name'] ?? l10n.unnamed)),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        setState(() {
          scannedBarcode = barcode;
          imageUrl = null;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(l10n.productNotFoundMessage),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } catch (e) {
      print('Barcode lookup error: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(l10n.errorFetchingProductInfo),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => _isLoadingProduct = false);
    }
  }
}
